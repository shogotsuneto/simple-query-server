# Integration test queries configuration
# Uses the same queries as example but in isolated test environment
# Also includes middleware-specific test queries

queries:
  # Get a user by ID
  get_user_by_id:
    sql: "SELECT id, name, email FROM users WHERE id = :id"
    params:
      - name: id
        type: int

  # Search users by name pattern
  search_users:
    sql: "SELECT id, name FROM users WHERE name LIKE :name"
    params:
      - name: name
        type: string

  # Get user with additional info
  get_user_details:
    sql: "SELECT u.id, u.name, u.email, p.bio FROM users u LEFT JOIN profiles p ON u.id = p.user_id WHERE u.id = :user_id"
    params:
      - name: user_id
        type: int

  # List users with pagination
  list_users:
    sql: "SELECT id, name, email FROM users ORDER BY name LIMIT :limit OFFSET :offset"
    params:
      - name: limit
        type: int
      - name: offset
        type: int

  # Get user count by status
  count_users_by_status:
    sql: "SELECT status, COUNT(*) as count FROM users WHERE status = :status GROUP BY status"
    params:
      - name: status
        type: string

  # Simple query with no parameters
  get_all_active_users:
    sql: "SELECT id, name, email FROM users WHERE active = true ORDER BY name"
    params: []

  # Additional test queries for integration testing
  test_invalid_sql:
    sql: "SELECT * FROM nonexistent_table WHERE id = :id"
    params:
      - name: id
        type: int

  test_multiple_params:
    sql: "SELECT * FROM users WHERE id > :min_id AND id < :max_id AND status = :status ORDER BY id"
    params:
      - name: min_id
        type: int
      - name: max_id
        type: int
      - name: status
        type: string

  # Middleware-specific test queries
  
  # Query that uses only middleware parameter (user_id from header)
  get_current_user:
    sql: "SELECT id, name, email FROM users WHERE id = :user_id"
    params: []
    middleware_params:
      - name: user_id
        type: string
        
  # Query that mixes body and middleware parameters
  get_user_by_tenant:
    sql: "SELECT id, name, email FROM users WHERE id = :id AND tenant_id = :tenant_id"
    params:
      - name: id
        type: int
    middleware_params:
      - name: tenant_id
        type: string
        
  # Query for testing required middleware parameter
  secure_user_data:
    sql: "SELECT id, name, email, 'sensitive data' as data FROM users WHERE id = :user_id"
    params: []
    middleware_params:
      - name: user_id
        type: string
      - name: auth_token
        type: string
        
  # Query to test multiple middleware parameters
  tenant_user_query:
    sql: "SELECT 'tenant query' as type, :user_id as user_id, :tenant_id as tenant_id"
    params: []
    middleware_params:
      - name: user_id
        type: string
      - name: tenant_id
        type: string